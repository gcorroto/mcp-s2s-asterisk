# Configuración MCP Asistente Telefónico Conversacional

# ==============================================
# CONFIGURACIÓN ASISTENTE TELEFÓNICO
# ==============================================

# URL del asistente telefónico (según tu ejemplo)
PHONE_API_URL=http://192.168.4.44:8000

# API Key para autenticar con el asistente telefónico
PHONE_API_KEY=phone-secret-key

# Timeout por defecto para llamadas (en milisegundos)
PHONE_TIMEOUT=30000

# Número de reintentos automáticos
PHONE_RETRIES=3

# URL del MCP para callbacks (donde el asistente enviará respuestas)
MCP_CALLBACK_URL=http://localhost:3000

# ==============================================
# CONFIGURACIÓN SEGURIDAD MCP
# ==============================================

# API Key para proteger endpoints del MCP
MCP_CALLBACK_API_KEY=mcp-secret-key

# IPs permitidas para acceder a endpoints protegidos (separadas por comas)
# Dejar vacío para permitir todas las IPs
MCP_ALLOWED_IPS=192.168.4.44,127.0.0.1

# Configuración JWT (opcional, para futuro)
MCP_JWT_SECRET=mcp-jwt-secret-key
MCP_TOKEN_EXPIRATION=3600

# ==============================================
# CONFIGURACIÓN SERVIDOR
# ==============================================

# Tipo de servidor: 'stdio' para uso con Cursor, 'http' para testing
MCP_SERVER_TYPE=http

# Puerto para modo HTTP
MCP_HTTP_PORT=3000

# Entorno de ejecución
NODE_ENV=development

# ==============================================
# INSTRUCCIONES DE USO
# ==============================================

# 1. Copia este archivo como .env en la raíz del proyecto
# 2. Ajusta las URLs y API keys según tu entorno
# 3. Para testing rápido, los valores por defecto funcionarán
# 4. Ejecuta: npm run build && MCP_SERVER_TYPE=http npm run start-node
# 5. Verifica que funciona: curl http://localhost:3000/status

# ==============================================
# EJEMPLOS DE COMANDOS
# ==============================================

# Iniciar en modo HTTP para testing:
# MCP_SERVER_TYPE=http MCP_HTTP_PORT=3000 npm run start-node

# Iniciar en modo stdio para Cursor:
# npm run start-node

# Health check:
# curl http://localhost:3000/api/phone/health

# Callback de prueba desde asistente telefónico:
# curl -X POST http://localhost:3000/api/phone/conversation-result \
#   -H "Content-Type: application/json" \
#   -H "X-MCP-API-Key: mcp-secret-key" \
#   -d '{
#     "callId": "test_123",
#     "usuario": "Goyo",
#     "telefono": "100",
#     "status": "completed",
#     "duration": 120,
#     "resumen_conversacion": "El usuario confirmó que la cita del martes está bien",
#     "resultado_accion": "Cita confirmada para el martes a las 10:00",
#     "informacion_obtenida": {
#       "fecha_cita": "2024-01-09",
#       "hora_cita": "10:00",
#       "confirmado": true
#     }
#   }'

# Confirmar información durante llamada:
# curl -X POST http://localhost:3000/api/phone/confirm-info \
#   -H "Content-Type: application/json" \
#   -H "X-MCP-API-Key: mcp-secret-key" \
#   -d '{
#     "callId": "test_123",
#     "tipo_informacion": "cita_medica",
#     "datos": "{\"fecha\": \"2024-01-09\", \"hora\": \"10:00\"}",
#     "usuario_confirmo": true
#   }'

# ==============================================
# EJEMPLO DE USO DESDE CLAUDE
# ==============================================

# Realizar llamada telefónica:
# await mcp_phone_assistant({
#   action: "make_call",
#   usuario: "Goyo",
#   telefono: "100",
#   proposito: "Confirmar cita médica de mañana",
#   contexto: "El usuario tiene una cita médica programada para mañana a las 10:00"
# });

# Obtener resultado:
# await mcp_phone_assistant({
#   action: "get_last_result", 
#   callId: "call_123"
# }); 